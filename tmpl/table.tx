<div class="row"><div class="col-sm">
  <form class="form-inline py-3" method="GET">
    <div class="input-group">
      <div class="input-group-prepend">
        <label class="input-group-text">
          <span class="oi oi-person"></span>
        </label>
      </div>
      <select name="userid" class="custom-select">
        <option value="">Choose user...</option>
:       for $users -> $user {
          <option value="<: $user.oid :>" <: $params.userid == $user.oid ? "selected" : "" :> >
            <:= $user.rolname :>
          </option>
:       }
      </select>
    </div>

    <div class="input-group mx-3">
      <div class="input-group-prepend">
        <label class="input-group-text">
          <span class="oi oi-box"></span>
        </label>
      </div>
      <select name="dbid" class="custom-select">
        <option value="">Choose db...</option>
:       for $dbs -> $db {
          <option value="<: $db.oid :>" <: $params.dbid == $db.oid ? "selected" : "" :>>
            <: $db.datname :>
          </option>
:       }
      </select>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>

    <input class="form-control ml-auto" type="text" placeholder="Search..." onkeyup="filterChanged(this.value)">
  </form>
</div></div>

<div class="row mb-5"><div class="col-sm">
  <table id="example" class="display">
  <thead></thead>
  <tbody></tbody>
  <tfoot></tfoot>
  </table>
</div></div>

<script type="text/javascript" charset="utf-8">
  var tableSelector = '#example';
  function fnFormatDetails ( nTr ) {
    var oTable = $(tableSelector).dataTable();
    var aData = oTable.fnGetData(nTr);
    var sOut = '';
    sOut += '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;" width="100%">';
    sOut += '<tr><td>Query:</td><td>' + aData.query + '</td></tr>';
    sOut += '</table>';

    return sOut;
  }

  var queryRenderFn = function(data, type, full) {
    var ret = data;
    if (data.length > 125) {
        ret = data.substr(0, 125) + " <b>...</b>";
    }
    return ret;
  }

  $(document).ready(function() {
    var aoColumns = <: $aoColumnsJSON | raw :>;
    for (var key in aoColumns) {
        var obj = aoColumns[key];
        if (obj['mRender']) {
            obj['mRender'] = eval(obj['mRender']);
        }
    }

    var imgClicks = function() {
        var imgs = $(tableSelector +' tbody tr td img')
        var oTable = $(tableSelector).dataTable();
        imgs.on('click', function(event){
            var nTr = $(this).parents('tr')[0];
            if ( oTable.fnIsOpen(nTr) ) {
                this.src = "/images/details_open.png";
                oTable.fnClose( nTr );
            }
            else {
                this.src = "/images/details_close.png";
                oTable.fnOpen( nTr, fnFormatDetails(nTr), 'details' );
            }
        } );
    };

    $(tableSelector).DataTable( {
        "drawCallback": imgClicks,

        "paginationType": "full_numbers",
        "pageLength": 100,
        "lengthChange": false,

        "processing": true,
        "serverSide": true,
        "ajaxSource": "<: $db_url :>stat.json<: $filter :>",

        "scrollCollapse": true,
        "sorting": [
            ['5', /* total_exec_time */ 'desc'] // default sorting
        ],
        "columns": aoColumns,
        language: {
          search: "_INPUT_",
        },
    });

    toggleView();

  });

  function toggleView() {
      // FIXME: quick hack
      var tail = [11,12,13,14,15,16,17,18,19,20,21];
      fnShowHideList(tail);
  }

  function fnShowHideList(list) {
      for (var i = 0; i < list.length; i++) {
          fnShowHide(list[i]);
      }
  }
  function fnShowHide(iCol) {
      /* Get the DataTables object again - this is not a recreation, just a get of the object */
      var oTable = $('#example').dataTable();

      var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
      oTable.fnSetColumnVis( iCol, bVis ? false : true );
  }

  function filterChanged(v) {
    $(tableSelector).DataTable().search(v).draw();
  }

</script>
